import{_ as e,c as s,o as i,az as r}from"./chunks/framework.D7CeChXd.js";const u=JSON.parse('{"title":"cursor 使用教程","description":"","frontmatter":{"title":"cursor 使用教程","Link":"[[学习笔记]]","tags":["领域/学习笔记/软件"],"date":"2025-01-10T00:00:00.000Z","key-words":["cursor","软件"]},"headers":[],"relativePath":"01 知识库/cursor 使用教程.md","filePath":"01 知识库/cursor 使用教程.md","lastUpdated":1748091541000}'),o={name:"01 知识库/cursor 使用教程.md"};function t(l,a,c,n,h,d){return i(),s("div",null,a[0]||(a[0]=[r(`<h1 id="cursor-使用教程" tabindex="-1">cursor 使用教程 <a class="header-anchor" href="#cursor-使用教程" aria-label="Permalink to &quot;cursor 使用教程&quot;">​</a></h1><h1 id="基础用法" tabindex="-1">基础用法 <a class="header-anchor" href="#基础用法" aria-label="Permalink to &quot;基础用法&quot;">​</a></h1><h2 id="快捷键" tabindex="-1">快捷键 <a class="header-anchor" href="#快捷键" aria-label="Permalink to &quot;快捷键&quot;">​</a></h2><p>cmd+L 调用 chat，cmd+I 调用 composer</p><h2 id="模型选择" tabindex="-1">模型选择 <a class="header-anchor" href="#模型选择" aria-label="Permalink to &quot;模型选择&quot;">​</a></h2><p>gpt-4o更通用，适合在 chat。claude 代码能力很强，适合在 composer。</p><h2 id="files" tabindex="-1">@files <a class="header-anchor" href="#files" aria-label="Permalink to &quot;@files&quot;">​</a></h2><p>引用文件## @folders 引用文件夹 @docs 引用文档，相当于知识库。</p><ul><li>在设置页面docs 设置中，添加URL，注意链接后缀为/，表示含子页面，否则只是其当前页面。</li><li>直接在输入窗口@+URL，直接添加链接，也可以作为临时引用。</li></ul><h2 id="web" tabindex="-1">@web <a class="header-anchor" href="#web" aria-label="Permalink to &quot;@web&quot;">​</a></h2><p>从网络进行搜索。</p><h2 id="git" tabindex="-1">@git <a class="header-anchor" href="#git" aria-label="Permalink to &quot;@git&quot;">​</a></h2><p>从 git 中检索提交过的内容，例如对比多个提交内容的差异。</p><h2 id="codebase" tabindex="-1">@codebase <a class="header-anchor" href="#codebase" aria-label="Permalink to &quot;@codebase&quot;">​</a></h2><p>cursor 在每次打开时，会执行 codebase indexing，即对本次打开的项目内容扫描，embedding 到云端。<em>（有时需要自己点击设置页面中的resync index）</em> 对于不想被索引的文件放到<code>.cursorignore</code>文件，将不会被 cursor 纳入索引（ 参考gitignore）。 通常包含日志文件、环境变量文件、构建过程文件、缓存文件、与代码无关的第三方配置文件等。可以让 cursor 自动检索目录生成。</p><h2 id="notepad" tabindex="-1">notepad <a class="header-anchor" href="#notepad" aria-label="Permalink to &quot;notepad&quot;">​</a></h2><p>记事本。chat 与 composer 聊天记录不互通，可以通过创建 notepad 作为备忘进行对话历史记录，便于其他时间快速调用。</p><h2 id="rules" tabindex="-1">rules <a class="header-anchor" href="#rules" aria-label="Permalink to &quot;rules&quot;">​</a></h2><p>全局规则，在设置界面定义。例如全局使用中文。 项目规则，在项目文件夹新建<code>.cursorrules</code>文件，内容可以包含：项目简介、项目架构（文件夹构成）、命名规范、组件规范、样式规范、git 提交规范等等</p><h1 id="技巧和思路" tabindex="-1">技巧和思路 <a class="header-anchor" href="#技巧和思路" aria-label="Permalink to &quot;技巧和思路&quot;">​</a></h1><h2 id="先明确需求" tabindex="-1">先明确需求 <a class="header-anchor" href="#先明确需求" aria-label="Permalink to &quot;先明确需求&quot;">​</a></h2><p>通过 chat，描述大概的目标，逐步拆解形成一个细致的需求，此时可以将该需求或 feature记录到 notepad。再将该notepad喂到 composer 中进行代码生成。 在 composer 执行多次遇到问题后，可以记录到 notepad 中，反馈至 chat 中继续沟通。</p><h2 id="项目初始化工作" tabindex="-1">项目初始化工作 <a class="header-anchor" href="#项目初始化工作" aria-label="Permalink to &quot;项目初始化工作&quot;">​</a></h2><ol><li>生成<code>.cursorignore</code>文件 打开项目后，应该让 cursor 检索整个项目，并生成<code>.cursorignore</code>文件，编辑添加需要忽略的文件。然后在设置页面点击resync index，重建项目代码索引。</li><li>录入 docs 项目需要参考的文档，如需求文档、接口文档及其他技术文档，提前录入 docs 中。</li><li>生成<code>.cursorrules</code>文件 定义项目规则，如果不会写，可以通过调用 docs 文档，请 ai 生成。</li></ol><h2 id="composer-使用技巧" tabindex="-1">composer 使用技巧 <a class="header-anchor" href="#composer-使用技巧" aria-label="Permalink to &quot;composer 使用技巧&quot;">​</a></h2><ol><li>检测代码效果 可以先点击 saveall，运行看看效果，再决定 accept 还是 reject</li><li>composer 回滚代码 如发生多次记录都不满意，想回滚到某次记录时，可以在 composer 聊天框的该次记录框上方的 checkpoint，点击 restore，会恢复到当时的代码版本。</li><li>composer 预防乱改代码 注意用词，避免 ai 错误的执行。</li></ol><ul><li>增加：<em>请先复述一遍我的需求再进行答复，让我能够确认你真的理解了我的需求指令。</em> 然后检查其复述与期望是否一致，再令其生成代码</li><li>需求指令单一化、尽可能明确范围：例如在@lib 中写接口，在@components 中写组件，在@types 中写类型文件等等</li><li>逐步逐点的描述需求</li></ul><h2 id="bug调试" tabindex="-1">bug调试 <a class="header-anchor" href="#bug调试" aria-label="Permalink to &quot;bug调试&quot;">​</a></h2><p>如果某次提交后产生了bug，可以在 chat 中通过@git 选择之前提交的版本，让 ai 检索差异，缩小问答的范围，提高回复的准确性。@web 联网检索答案。如果 bug 解决方案较为复杂，可以创建一个 notepad 进行记录，然后喂给 composer。 notepad 便于保存，同时更方便编辑。注意 notepad 只是个备忘录，需要及时归档为 docs。便于下次运行类似项目时，作为 docs 导入。</p><h2 id="commit" tabindex="-1">commit <a class="header-anchor" href="#commit" aria-label="Permalink to &quot;commit&quot;">​</a></h2><p>可以为修改后暂存的文档一键生成 commit message，然后点击提交。</p><h2 id="使用临时邮箱-无限邮箱进行注册-白嫖" tabindex="-1">使用临时邮箱/无限邮箱进行注册，白嫖 <a class="header-anchor" href="#使用临时邮箱-无限邮箱进行注册-白嫖" aria-label="Permalink to &quot;使用临时邮箱/无限邮箱进行注册，白嫖&quot;">​</a></h2><p>涉及到指纹检测，可以通过 github.com/isboyjc/cursor-reset 运行脚本</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># macOS</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fsSL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://raw.githubusercontent.com/isboyjc/cursor-reset/main/scripts/reset.sh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sh</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># windows</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">irm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://raw.githubusercontent.com/isboyjc/cursor-reset/main/scripts/reset.ps1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> iex</span></span></code></pre></div>`,34)]))}const m=e(o,[["render",t]]);export{u as __pageData,m as default};
