import{_ as e,c as r,o,am as a}from"./chunks/framework.CZQMZty9.js";const u=JSON.parse('{"title":"Docker 学习","description":"","frontmatter":{"title":"Docker 学习","Link":"[[学习笔记]]","tags":["领域/学习笔记/软件"],"date":"2025-04-20T00:00:00.000Z","key-words":null},"headers":[],"relativePath":"01 知识库/Docker 学习.md","filePath":"01 知识库/Docker 学习.md","lastUpdated":1748091541000}'),d={name:"01 知识库/Docker 学习.md"};function l(i,t,n,s,c,h){return o(),r("div",null,t[0]||(t[0]=[a('<h1 id="docker-学习" tabindex="-1">Docker 学习 <a class="header-anchor" href="#docker-学习" aria-label="Permalink to &quot;Docker 学习&quot;">​</a></h1><h1 id="docker网络模式及容器间通信" tabindex="-1">Docker网络模式及容器间通信 <a class="header-anchor" href="#docker网络模式及容器间通信" aria-label="Permalink to &quot;Docker网络模式及容器间通信&quot;">​</a></h1><p><mark>参考阅读</mark>：<a href="https://zhuanlan.zhihu.com/p/212772001" target="_blank" rel="noreferrer">Docker网络模式详解及容器间通信</a> Docker 主要有 <strong>5 种网络模式</strong>，区别如下：</p><hr><h3 id="_1-bridge-模式-默认模式" tabindex="-1">1. <strong>Bridge 模式（默认模式）</strong> <a class="header-anchor" href="#_1-bridge-模式-默认模式" aria-label="Permalink to &quot;1. **Bridge 模式（默认模式）**&quot;">​</a></h3><ul><li><strong>特点</strong>： <ul><li>通过虚拟网桥 <code>docker0</code> 为容器分配<mark>独立 IP</mark></li><li>容器间通过网桥通信，与宿主机隔离</li><li>需手动映射端口（<code>-p</code> 参数）才能被外部访问</li></ul></li><li><strong>适用场景</strong>： <ul><li>单机环境下<strong>容器间通信</strong>（如微服务）</li><li>需要网络隔离的常规应用</li></ul></li></ul><hr><h3 id="_2-host-模式" tabindex="-1">2. <strong>Host 模式</strong> <a class="header-anchor" href="#_2-host-模式" aria-label="Permalink to &quot;2. **Host 模式**&quot;">​</a></h3><ul><li><strong>特点</strong>： <ul><li>直接共享宿主机的网络命名空间</li><li>容器使用宿主机 IP 和端口，<strong>无需端口映射</strong></li><li>网络性能最佳，但失去隔离性（端口冲突风险）</li></ul></li><li><strong>适用场景</strong>： <ul><li>高性能需求（如网络密集型应用）</li><li>临时测试或调试</li></ul></li></ul><hr><h3 id="_3-none-模式" tabindex="-1">3. <strong>None 模式</strong> <a class="header-anchor" href="#_3-none-模式" aria-label="Permalink to &quot;3. **None 模式**&quot;">​</a></h3><ul><li><strong>特点</strong>： <ul><li>禁用所有网络接口</li><li>容器完全隔离，需手动配置网络（如自定义网卡）</li></ul></li><li><strong>适用场景</strong>： <ul><li>高度定制化网络（如安全敏感场景）</li><li>特殊测试环境</li></ul></li></ul><hr><h3 id="_4-container-共享模式" tabindex="-1">4. <strong>Container 共享模式</strong> <a class="header-anchor" href="#_4-container-共享模式" aria-label="Permalink to &quot;4. **Container 共享模式**&quot;">​</a></h3><ul><li><strong>特点</strong>： <ul><li>共享指定容器的网络命名空间</li><li>多个容器共用 IP 和端口（类似 <code>localhost</code> 通信）</li></ul></li><li><strong>适用场景</strong>： <ul><li>容器间紧密协作（如日志收集容器与主应用）</li></ul></li></ul><hr><h3 id="_5-overlay-模式-跨主机网络" tabindex="-1">5. <strong>Overlay 模式（跨主机网络）</strong> <a class="header-anchor" href="#_5-overlay-模式-跨主机网络" aria-label="Permalink to &quot;5. **Overlay 模式（跨主机网络）**&quot;">​</a></h3><ul><li><strong>特点</strong>： <ul><li>用于 Docker Swarm 集群，跨主机通信</li><li>通过 VXLAN 隧道实现容器网络互联</li></ul></li><li><strong>适用场景</strong>： <ul><li>分布式系统、多节点微服务架构</li></ul></li></ul><hr><h3 id="对比总结" tabindex="-1">对比总结 <a class="header-anchor" href="#对比总结" aria-label="Permalink to &quot;对比总结&quot;">​</a></h3><table tabindex="0"><thead><tr><th>模式</th><th>隔离性</th><th>性能</th><th>端口管理</th><th>典型用途</th></tr></thead><tbody><tr><td><strong>Bridge</strong></td><td>高</td><td>中等</td><td>需映射端口</td><td>单机容器通信</td></tr><tr><td><strong>Host</strong></td><td>无</td><td>最高</td><td>直接使用宿主机</td><td>高性能需求</td></tr><tr><td><strong>None</strong></td><td>最高</td><td>无网络</td><td>手动配置</td><td>定制化/安全场景</td></tr><tr><td><strong>Container</strong></td><td>低</td><td>高</td><td>共享容器端口</td><td>容器组协作</td></tr><tr><td><strong>Overlay</strong></td><td>高</td><td>中等</td><td>自动分配</td><td>跨主机集群（如 Swarm）</td></tr></tbody></table><p>选择时需权衡 <strong>隔离性、性能、易用性</strong>。例如：开发常用 <code>bridge</code>，生产集群用 <code>overlay</code>，调试临时用 <code>host</code>。</p><h2 id="查看容器网络信息" tabindex="-1">查看容器网络信息 <a class="header-anchor" href="#查看容器网络信息" aria-label="Permalink to &quot;查看容器网络信息&quot;">​</a></h2><p>可以通过 <code>docker network inspect bridge</code> 查看所有 <code>bridge</code> 网络模式下的容器, 可以通过 <code>docker network inspect host</code>查看所有 <code>host</code> 网络模式下的容器, 在 <code>Containers</code> 节点中可以看到容器名称。 host 网络模式需要在创建容器时通过参数 <code>--net host</code> 或者 <code>--network host</code> 指定，默认是bridg模式。</p><p>对于每个容器的 IP 地址和 Gateway 信息，我们可以通过 <code>docker inspect 容器名称|ID</code> 进行查看，在 <code>NetworkSettings</code> 节点中可以看到详细信息。</p><h2 id="容器间网络通信" tabindex="-1">容器间网络通信 <a class="header-anchor" href="#容器间网络通信" aria-label="Permalink to &quot;容器间网络通信&quot;">​</a></h2><p>假设两个容器都是bridge网络模式，首先通过 <code>docker network inspect bridge</code> 查看两容器的具体 IP 信息。 执行<code>docker exec -it 容器名称或ID ping xxx.xx.xx.xx</code>，让一个容器去ping另一个容器的IP，测试通信与否。 通过创建自定义网络，可以进一步实现DNS功能，使用容器名称进行网络通信，具体查看上面参考阅读链接。</p><h1 id="docker-镜像存储及迁移" tabindex="-1">Docker 镜像存储及迁移 <a class="header-anchor" href="#docker-镜像存储及迁移" aria-label="Permalink to &quot;Docker 镜像存储及迁移&quot;">​</a></h1>',28)]))}const k=e(d,[["render",l]]);export{u as __pageData,k as default};
